{"version":3,"file":"ort.es6.min.js","mappings":"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AAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,CAAC,GAAGlC,OA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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.webgpu = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        if (options.tensorLayout === 'NHWC') {\n            throw new Error('NHWC Tensor layout is not supported yet');\n        }\n        const { height, width } = options;\n        const norm = options.norm ?? { mean: 255, bias: 0 };\n        let normMean;\n        let normBias;\n        if (typeof (norm.mean) === 'number') {\n            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n        }\n        else {\n            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n        }\n        if (typeof (norm.bias) === 'number') {\n            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n        }\n        else {\n            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const stride = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = stride * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = stride;\n            rTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isString = typeof image === 'string';\n        let data;\n        let tensorConfig = options ?? {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isString) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toDataURL(options) {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.dims[3];\n        canvas.height = this.dims[2];\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            let width;\n            let height;\n            if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n                width = this.dims[2];\n                height = this.dims[3];\n            }\n            else { // Default layout is NCWH\n                width = this.dims[3];\n                height = this.dims[2];\n            }\n            const inputformat = options?.format !== undefined ? options.format : 'RGB';\n            const norm = options?.norm;\n            let normMean;\n            let normBias;\n            if (norm === undefined || norm.mean === undefined) {\n                normMean = [255, 255, 255, 255];\n            }\n            else {\n                if (typeof (norm.mean) === 'number') {\n                    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n                }\n                else {\n                    normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                    if (norm.mean[3] !== undefined) {\n                        normMean[3] = norm.mean[3];\n                    }\n                }\n            }\n            if (norm === undefined || norm.bias === undefined) {\n                normBias = [0, 0, 0, 0];\n            }\n            else {\n                if (typeof (norm.bias) === 'number') {\n                    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n                }\n                else {\n                    normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                    if (norm.bias[3] !== undefined) {\n                        normBias[3] = norm.bias[3];\n                    }\n                }\n            }\n            const stride = height * width;\n            // Default pointer assignments\n            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n                aTensorPointer = stride * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = stride;\n                gTensorPointer = stride * 2;\n            }\n            for (let i = 0; i < height; i++) {\n                for (let j = 0; j < width; j++) {\n                    const R = (this.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                    const G = (this.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                    const B = (this.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                    const A = aTensorPointer === -1 ?\n                        255 :\n                        (this.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                    pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                    pixels2DContext.fillRect(j, i, 1, 1);\n                }\n            }\n            return canvas.toDataURL();\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            let width;\n            let height;\n            let channels;\n            if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n                width = this.dims[2];\n                height = this.dims[1];\n                channels = this.dims[3];\n            }\n            else { // Default layout is NCWH\n                width = this.dims[3];\n                height = this.dims[2];\n                channels = this.dims[1];\n            }\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const norm = options?.norm;\n            let normMean;\n            let normBias;\n            if (norm === undefined || norm.mean === undefined) {\n                normMean = [255, 255, 255, 255];\n            }\n            else {\n                if (typeof (norm.mean) === 'number') {\n                    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n                }\n                else {\n                    normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                    if (norm.mean[3] !== undefined) {\n                        normMean[3] = norm.mean[3];\n                    }\n                }\n            }\n            if (norm === undefined || norm.bias === undefined) {\n                normBias = [0, 0, 0, 0];\n            }\n            else {\n                if (typeof (norm.bias) === 'number') {\n                    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n                }\n                else {\n                    normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                    if (norm.bias[3] !== undefined) {\n                        normBias[3] = norm.bias[3];\n                    }\n                }\n            }\n            const stride = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n                aTensorPointer = stride * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = stride;\n                bTensorPointer = stride * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = stride;\n                gTensorPointer = stride * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                image.data[aImagePointer] = aTensorPointer === -1 ?\n                    255 :\n                    (this.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    const backend = new WebGpuBackend();\n    await backend.initialize();\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<typeof env.logLevel>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(env.logLevel!);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (env.debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Relu', [unaryOps.relu]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {getInstance, initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n\n      // TODO: support JSEP in worker\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n\n    // init JSEP if available\n    await initJsep(getInstance());\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\nimport {logLevelStringToEnum} from './wasm-common';\n\nlet ortInit: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.15.1\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={899:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,n,r,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(r.has(e))throw new Error(\\\"Circular reference in options\\\");r.add(e)}Object.entries(e).forEach((([e,o])=>{const i=n?n+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",r,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},918:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setRunOptions=e=>{const t=(0,o.getInstance)();let n=0;const i=[],s=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))s.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))s.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(s.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,o),0===n)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,r.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,r)=>{const o=(0,a.allocWasmString)(e,i),s=(0,a.allocWasmString)(r,i);if(0!==t._OrtAddRunConfigEntry(n,o,s))throw new Error(`Can't set a run config entry: ${e} - ${r}`)})),[n,i]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),i.forEach(t._free),e}}},622:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const r=n(899),a=n(444),o=n(263);t.setSessionOptions=e=>{var t,n,i,s;const u=(0,o.getInstance)();let c=0;const l=[],f=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(f);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=f.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),p=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(n=f.executionMode)&&void 0!==n?n:\\\"sequential\\\"),d=\\\"string\\\"==typeof f.logId?(0,a.allocWasmString)(f.logId,l):0,m=null!==(i=f.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log serverity level is not valid: ${m}`);const g=null!==(s=f.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const h=\\\"string\\\"==typeof f.optimizedModelFilePath?(0,a.allocWasmString)(f.optimizedModelFilePath,l):0;if(c=u._OrtCreateSessionOptions(e,!!f.enableCpuMemArena,!!f.enableMemPattern,p,!!f.enableProfiling,0,d,m,g,h),0===c)throw new Error(\\\"Can't create session options\\\");return f.executionProviders&&((e,t,n)=>{for(const r of t){let t=\\\"string\\\"==typeof r?r:r.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,n);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(c,f.executionProviders,l),void 0!==f.extra&&(0,r.iterateExtraOptions)(f.extra,\\\"\\\",new WeakSet,((e,t)=>{const n=(0,a.allocWasmString)(e,l),r=(0,a.allocWasmString)(t,l);if(0!==u._OrtAddSessionConfigEntry(c,n,r))throw new Error(`Can't set a session config entry: ${e} - ${t}`)})),[c,l]}catch(e){throw 0!==c&&u._OrtReleaseSessionOptions(c),l.forEach(u._free),e}}},444:(e,t,n)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const r=n(263);t.allocWasmString=(e,t)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),t.push(o),o}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;const a=n(918),o=n(622),i=n(444),s=n(917),u=n(263);t.initOrt=(e,t)=>{const n=(0,u.getInstance)()._OrtInit(e,t);if(0!==n)throw new Error(`Can't initialize onnxruntime. error code = ${n}`)};const c=new Map;t.createSessionAllocate=e=>{const t=(0,u.getInstance)(),n=t._malloc(e.byteLength);return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=(e,t)=>{const n=(0,u.getInstance)();let r=0,a=0,i=[];try{if([a,i]=(0,o.setSessionOptions)(t),r=n._OrtCreateSession(e[0],e[1],a),0===r)throw new Error(\\\"Can't create a session\\\")}finally{n._free(e[0]),0!==a&&n._OrtReleaseSessionOptions(a),i.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],d=[],m=[];for(let e=0;e<s;e++){const t=n._OrtGetInputName(r,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");p.push(t),f.push(n.UTF8ToString(t))}for(let e=0;e<l;e++){const t=n._OrtGetOutputName(r,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");m.push(t),d.push(n.UTF8ToString(t))}return c.set(r,[r,p,m]),[r,f,d]},t.createSession=(e,n)=>{const r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=e=>{const t=(0,u.getInstance)(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=n[1],o=n[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(r),c.delete(e)},t.run=(e,t,n,o,l)=>r(void 0,void 0,void 0,(function*(){const r=(0,u.getInstance)(),f=c.get(e);if(!f)throw new Error(\\\"invalid session id\\\");const p=f[0],d=f[1],m=f[2],g=t.length,h=o.length;let y=0,v=[];const w=[],b=[];try{[y,v]=(0,a.setRunOptions)(l);for(let e=0;e<g;e++){const t=n[e][0],a=n[e][1],o=n[e][2];let u,c;if(Array.isArray(o)){c=4*o.length,u=r._malloc(c),b.push(u);let e=u/4;for(let t=0;t<o.length;t++){if(\\\"string\\\"!=typeof o[t])throw new TypeError(`tensor data at index ${t} is not a string`);r.HEAPU32[e++]=(0,i.allocWasmString)(o[t],b)}}else c=o.byteLength,u=r._malloc(c),b.push(u),r.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),u);const l=r.stackSave(),f=r.stackAlloc(4*a.length);try{let e=f/4;a.forEach((t=>r.HEAP32[e++]=t));const n=r._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(t),u,c,f,a.length);if(0===n)throw new Error(\\\"Can't create a tensor\\\");w.push(n)}finally{r.stackRestore(l)}}const e=r.stackSave(),u=r.stackAlloc(4*g),c=r.stackAlloc(4*g),f=r.stackAlloc(4*h),_=r.stackAlloc(4*h);try{let e=u/4,n=c/4,a=f/4,i=_/4;for(let a=0;a<g;a++)r.HEAPU32[e++]=w[a],r.HEAPU32[n++]=d[t[a]];for(let e=0;e<h;e++)r.HEAPU32[a++]=0,r.HEAPU32[i++]=m[o[e]];let l=r._OrtRun(p,c,u,g,_,h,f,y);const v=r.jsepRunPromise;v&&void 0!==v.then&&(l=yield v);const b=[];if(0===l)for(let e=0;e<h;e++){const t=r.HEAPU32[f/4+e],n=r.stackSave(),a=r.stackAlloc(16);let o,i=0;try{if(l=r._OrtGetTensorData(t,a,a+4,a+8,a+12),0!==l)throw new Error(`Can't access output tensor data. error code = ${l}`);let e=a/4;const n=r.HEAPU32[e++];i=r.HEAPU32[e++];const u=r.HEAPU32[e++],c=r.HEAPU32[e++],f=[];for(let e=0;e<c;e++)f.push(r.HEAPU32[u/4+e]);r._OrtFree(u);const p=0===f.length?1:f.reduce(((e,t)=>e*t));if(o=(0,s.tensorDataTypeEnumToString)(n),\\\"string\\\"===o){const e=[];let t=i/4;for(let n=0;n<p;n++){const a=r.HEAPU32[t++],o=n===p-1?void 0:r.HEAPU32[t]-a;e.push(r.UTF8ToString(a,o))}b.push([o,f,e])}else{const e=new((0,s.tensorTypeToTypedArrayConstructor)(o))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(r.HEAPU8.subarray(i,i+e.byteLength)),b.push([o,f,e])}}finally{r.stackRestore(n),\\\"string\\\"===o&&i&&r._free(i),r._OrtReleaseTensor(t)}}if(0===l)return b;throw new Error(`failed to call OrtRun(). error code = ${l}.`)}finally{r.stackRestore(e)}}finally{w.forEach(r._OrtReleaseTensor),b.forEach(r._free),r._OrtReleaseRunOptions(y),v.forEach(r._free)}})),t.endProfiling=e=>{const t=(0,u.getInstance)(),n=c.get(e);if(!n)throw new Error(\\\"invalid session id\\\");const r=n[0],a=t._OrtEndProfiling(r);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(n(449)),u=n(932),c=n(474);let l,f=!1,p=!1,d=!1;t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(f)return Promise.resolve();if(p)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(d)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");p=!0;const t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),m=e.wasmPaths,g=\\\"string\\\"==typeof m?m:void 0,h=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(i,o),y=\\\"object\\\"==typeof m?m[h]:void 0;let v=!1;const w=[];if(t>0&&w.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),w.push(new Promise(((e,t)=>{const r=o?c:u,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=g?g:t)+h:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}r(a).then((t=>{p=!1,f=!0,l=t,e()}),(e=>{p=!1,d=!0,t(e)}))}))),yield Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(f&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!f||p||d||(p=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,p=!1,f=!1,d=!0)}},474:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){function t(){return P.buffer!=D&&G(P.buffer),F}function r(){return P.buffer!=D&&G(P.buffer),U}function a(){return P.buffer!=D&&G(P.buffer),I}function o(){return P.buffer!=D&&G(P.buffer),W}function i(){return P.buffer!=D&&G(P.buffer),j}var s,u,c;e=e||{},s||(s=void 0!==e?e:{}),s.ready=new Promise((function(e,t){u=e,c=t}));var l,f,p,d,m,g,h=Object.assign({},s),y=\\\"./this.program\\\",v=(e,t)=>{throw t},w=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,_=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,O=s.ENVIRONMENT_IS_PTHREAD||!1,S=\\\"\\\";function T(e){return s.locateFile?s.locateFile(e,S):S+e}if(_){let t;S=b?n(908).dirname(S)+\\\"/\\\":\\\"//\\\",g=()=>{m||(d=n(384),m=n(908))},l=function(e,t){return g(),e=m.normalize(e),d.readFileSync(e,t?void 0:\\\"utf8\\\")},p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,n)=>{g(),e=m.normalize(e),d.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof ie))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,t)=>{if(C)throw process.exitCode=e,t;t instanceof ie||x(\\\"exiting due to exception: \\\"+t),process.exit(e)},s.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=t.Worker}else(w||b)&&(b?S=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\\\"blob:\\\")?S.substr(0,S.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",_||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));_&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var A=console.log.bind(console),E=console.warn.bind(console);_&&(g(),A=e=>d.writeSync(1,e+\\\"\\\\n\\\"),E=e=>d.writeSync(2,e+\\\"\\\\n\\\"));var M,R=s.print||A,x=s.printErr||E;Object.assign(s,h),h=null,s.thisProgram&&(y=s.thisProgram),s.quit&&(v=s.quit),s.wasmBinary&&(M=s.wasmBinary);var C=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&ne(\\\"no native wasm support detected\\\");var P,k,D,F,U,I,W,j,H=!1,L=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function Y(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&L)return L.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function z(e,t){return(e>>>=0)?Y(r(),e,t):\\\"\\\"}function B(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function N(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function G(e){D=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=I=new Int32Array(e),s.HEAPU8=U=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=W=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=j=new Float64Array(e)}O&&(D=s.buffer);var q=s.INITIAL_MEMORY||16777216;if(O)P=s.wasmMemory,D=s.buffer;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),_&&console.log(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\\\"),Error(\\\"bad memory\\\");P&&(D=P.buffer),q=D.byteLength,G(D);var $,V=[],J=[],Q=[];function X(){var e=s.preRun.shift();V.unshift(e)}var K,Z=0,ee=null,te=null;function ne(e){throw O?postMessage({cmd:\\\"onAbort\\\",arg:e}):s.onAbort&&s.onAbort(e),x(e=\\\"Aborted(\\\"+e+\\\")\\\"),H=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function re(){return K.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ae(){var e=K;try{if(e==K&&M)return new Uint8Array(M);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ne(e)}}K=\\\"ort-wasm-threaded.wasm\\\",re()||(K=T(K));var oe={};function ie(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function se(e){(e=fe.La[e])||ne(),fe.Xa(e)}function ue(e){var t=fe.lb();if(!t)return 6;fe.Ra.push(t),fe.La[e.Ka]=t,t.Ka=e.Ka;var n={cmd:\\\"run\\\",start_routine:e.pb,arg:e.ib,pthread_ptr:e.Ka};return t.Qa=()=>{n.time=performance.now(),t.postMessage(n,e.vb)},t.loaded&&(t.Qa(),delete t.Qa),0}function ce(e){if(O)return He(1,1,e);C||(fe.qb(),s.onExit&&s.onExit(e),H=!0),v(e,new ie(e))}function le(e,t){if(!t&&O)throw de(e),\\\"unwind\\\";ce(e)}var fe={Oa:[],Ra:[],$a:[],La:{},Ua:function(){O&&fe.mb()},xb:function(){},mb:function(){fe.receiveObjectTransfer=fe.ob,fe.threadInitTLS=fe.Za,fe.setExitStatus=fe.Ya,C=!1},Ya:function(){},qb:function(){for(var e of Object.values(fe.La))fe.Xa(e);for(e of fe.Oa)e.terminate();fe.Oa=[]},Xa:function(e){var t=e.Ka;delete fe.La[t],fe.Oa.push(e),fe.Ra.splice(fe.Ra.indexOf(e),1),e.Ka=0,ct(t)},ob:function(){},Za:function(){fe.$a.forEach((e=>e()))},nb:function(e,t){e.onmessage=n=>{var r=(n=n.data).cmd;if(e.Ka&&(fe.kb=e.Ka),n.targetThread&&n.targetThread!=rt()){var a=fe.La[n.yb];a?a.postMessage(n,n.transferList):x('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===r?De(n.queue):\\\"spawnThread\\\"===r?ue(n):\\\"cleanupThread\\\"===r?se(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=fe.La[n],delete fe.La[n],r.terminate(),ct(n),fe.Ra.splice(fe.Ra.indexOf(r),1),r.Ka=0):\\\"cancelThread\\\"===r?fe.La[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t&&t(e),e.Qa&&(e.Qa(),delete e.Qa)):\\\"print\\\"===r?R(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===r?x(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"onAbort\\\"===r?s.onAbort&&s.onAbort(n.arg):r&&x(\\\"worker sent an unknown command \\\"+r);fe.kb=void 0},e.onerror=e=>{throw x(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},_&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){}))),e.postMessage({cmd:\\\"load\\\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:k})},hb:function(){var e=T(\\\"ort-wasm-threaded.worker.js\\\");fe.Oa.push(new Worker(e))},lb:function(){return 0==fe.Oa.length&&(fe.hb(),fe.nb(fe.Oa[0])),fe.Oa.pop()}};function pe(e){for(;0<e.length;)e.shift()(s)}function de(e){if(O)return He(2,0,e);try{le(e)}catch(e){e instanceof ie||\\\"unwind\\\"==e||v(1,e)}}s.PThread=fe,s.establishStackSpace=function(){var e=rt(),t=a()[e+44>>2>>>0];e=a()[e+48>>2>>>0],ft(t,t-e),dt(t)};var me,ge,he=[];function ye(e){this.Pa=e-24,this.gb=function(e){o()[this.Pa+4>>2>>>0]=e},this.cb=function(e){o()[this.Pa+8>>2>>>0]=e},this.eb=function(){a()[this.Pa>>2>>>0]=0},this.bb=function(){t()[this.Pa+12>>0>>>0]=0},this.fb=function(){t()[this.Pa+13>>0>>>0]=0},this.Ua=function(e,t){this.ab(),this.gb(e),this.cb(t),this.eb(),this.bb(),this.fb()},this.ab=function(){o()[this.Pa+16>>2>>>0]=0}}function ve(e,t,n,r){return O?He(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return x(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return O&&0===a.length?ve(e,t,n,r):(e={pb:n,Ka:e,ib:r,vb:a},O?(e.wb=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function be(e,t,n){return O?He(4,1,e,t,n):0}function _e(e,t){if(O)return He(5,1,e,t)}function Oe(e,t){if(O)return He(6,1,e,t)}function Se(e,t,n){if(O)return He(7,1,e,t,n)}function Te(e,t,n){return O?He(8,1,e,t,n):0}function Ae(e,t){if(O)return He(9,1,e,t)}function Ee(e,t,n){if(O)return He(10,1,e,t,n)}function Me(e,t,n,r){if(O)return He(11,1,e,t,n,r)}function Re(e,t,n,r){if(O)return He(12,1,e,t,n,r)}function xe(e,t,n,r){if(O)return He(13,1,e,t,n,r)}function Ce(e){if(O)return He(14,1,e)}function Pe(e,t){if(O)return He(15,1,e,t)}function ke(e,t,n){if(O)return He(16,1,e,t,n)}function De(e){Atomics.store(a(),e>>2,1),rt()&&ut(e),Atomics.compareExchange(a(),e>>2,1,0)}function Fe(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function Ue(e,t,n,r,a,o){return O?He(17,1,e,t,n,r,a,o):-52}function Ie(e,t,n,r,a,o){if(O)return He(18,1,e,t,n,r,a,o)}function We(e){var n=N(e)+1,r=at(n);return r&&B(e,t(),r,n),r}function je(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}if(O)return He(19,1,e,t,n);var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);a()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=r(s),t=r(u),e=We(e),t=We(t),c<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)}function He(e,t){var n=arguments.length-2,r=arguments;return function(e){var t=pt();return e=e(),dt(t),e}((()=>{for(var a=mt(8*n),o=a>>3,s=0;s<n;s++){var u=r[2+s];i()[o+s>>>0]=u}return st(e,n,a,t)}))}s.invokeEntryPoint=function(e,t){var n=he[e];n||(e>=he.length&&(he.length=e+1),he[e]=n=$.get(e)),e=n(t),C?fe.Ya(e):lt(e)},s.executeNotifiedProxyingQueue=De,ge=_?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:O?()=>performance.now()-s.__performance_now_clock_drift:()=>performance.now();var Le,Ye=[],ze={};function Be(){if(!Le){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in ze)void 0===ze[e]?delete t[e]:t[e]=ze[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Le=n}return Le}function Ne(e,n){if(O)return He(20,1,e,n);var r=0;return Be().forEach((function(a,i){var s=n+r;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,r+=a.length+1})),0}function Ge(e,t){if(O)return He(21,1,e,t);var n=Be();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function qe(e){return O?He(22,1,e):52}function $e(e,t,n,r){return O?He(23,1,e,t,n,r):52}function Ve(e,t,n,r,a){return O?He(24,1,e,t,n,r,a):70}var Je=[null,[],[]];function Qe(e,t,n,a){if(O)return He(25,1,e,t,n,a);for(var i=0,s=0;s<n;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=r()[u+l>>>0],p=Je[e];0===f||10===f?((1===e?R:x)(Y(p,0)),p.length=0):p.push(f)}i+=c}return o()[a>>2>>>0]=i,0}function Xe(e){return 0==e%4&&(0!=e%100||0==e%400)}var Ke=[31,29,31,30,31,30,31,31,30,31,30,31],Ze=[31,28,31,30,31,30,31,31,30,31,30,31];function et(e,n,r,o){function i(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ma;for(e=new Date(new Date(e.Na+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(Xe(e.getFullYear())?Ke:Ze)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=u(t,e)?0>=u(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={tb:a()[o>>2>>>0],sb:a()[o+4>>2>>>0],Sa:a()[o+8>>2>>>0],Va:a()[o+12>>2>>>0],Ta:a()[o+16>>2>>>0],Na:a()[o+20>>2>>>0],Ja:a()[o+24>>2>>>0],Ma:a()[o+28>>2>>>0],zb:a()[o+32>>2>>>0],rb:a()[o+36>>2>>>0],ub:f?z(f):\\\"\\\"},r=z(r),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),m=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ja].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ja]},\\\"%b\\\":function(e){return m[e.Ta].substring(0,3)},\\\"%B\\\":function(e){return m[e.Ta]},\\\"%C\\\":function(e){return s((e.Na+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Va,2)},\\\"%e\\\":function(e){return i(e.Va,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.Sa,2)},\\\"%I\\\":function(e){return 0==(e=e.Sa)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.Ta-1;t+=(Xe(e.Na+1900)?Ke:Ze)[n++]);return s(e.Va+t,3)},\\\"%m\\\":function(e){return s(e.Ta+1,2)},\\\"%M\\\":function(e){return s(e.sb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Sa&&12>e.Sa?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.tb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ja||7},\\\"%U\\\":function(e){return s(Math.floor((e.Ma+7-e.Ja)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ma+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Ma-2)%7&&t++,t)53==t&&(4==(n=(e.Ja+371-e.Ma)%7)||3==n&&Xe(e.Na)||(t=1));else{t=52;var n=(e.Ja+7-e.Ma-1)%7;(4==n||5==n&&Xe(e.Na%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Ja},\\\"%W\\\":function(e){return s(Math.floor((e.Ma+7-(e.Ja+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Na+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Na+1900},\\\"%z\\\":function(e){var t=0<=(e=e.rb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.ub},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)r.includes(p)&&(r=r.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(N(e)+1);return B(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){t().set(e,n>>>0)}(p,e),p.length-1)}fe.Ua();var tt=[null,ce,de,ve,be,_e,Oe,Se,Te,Ae,Ee,Me,Re,xe,Ce,Pe,ke,Ue,Ie,je,Ne,Ge,qe,$e,Ve,Qe],nt={b:function(e){return at(e+24)+24},c:function(e,t,n){throw new ye(e).Ua(t,n),e},L:function(e){ot(e,!b,1,!w),fe.Za()},l:function(e){O?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):se(e)},D:we,i:be,R:_e,z:Oe,B:Se,T:Te,P:Ae,I:Ee,O:Me,p:Re,A:xe,x:Ce,Q:Pe,y:ke,r:function(){},j:function(){ne(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},s:function(){ne(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},q:function(){return Date.now()},E:function(){return 2097152},V:function(){return!0},F:function(e,t,n,r){if(e==t)setTimeout((()=>De(r)));else if(O)postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:r});else{if(!(e=fe.La[e]))return;e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:r})}return 1},K:function(){return-1},W:function(e,t){e=new Date(1e3*Fe(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},X:function(e,t){e=new Date(1e3*Fe(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1),r=(e.getTime()-n.getTime())/864e5|0;a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(r!=(n=n.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},Y:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),s=o.getTimezoneOffset(),u=Math.min(s,i);return 0>n?a()[e+32>>2>>>0]=Number(i!=s&&u==r):0<n!=(u==r)&&(i=Math.max(s,i),t.setTime(t.getTime()+6e4*((0<n?u:i)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(t.getTime()-o.getTime())/864e5|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},G:Ue,H:Ie,Z:function e(t,n,r){e.jb||(e.jb=!0,je(t,n,r))},d:function(){ne(\\\"\\\")},m:function(){if(!_&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";me||(me={}),me[e]||(me[e]=1,_&&(e=\\\"warning: \\\"+e),x(e))}},w:function(){return 4294901760},f:ge,S:function(e,t,n){r().copyWithin(e>>>0,t>>>0,t+n>>>0)},g:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},J:function(e,t,n){Ye.length=t,n>>=3;for(var r=0;r<t;r++)Ye[r]=i()[n+r>>>0];return(0>e?oe[-e-1]:tt[e]).apply(null,Ye)},v:function(e){var t=r().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{P.grow(o-D.byteLength+65535>>>16),G(P.buffer);var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},U:function(){throw\\\"unwind\\\"},M:Ne,N:Ge,k:le,h:qe,o:$e,t:Ve,n:Qe,u:function e(r,a){e.Wa||(e.Wa=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}if(_)try{var t=n(760);return()=>t.randomBytes(1)[0]}catch(e){}return()=>ne(\\\"randomDevice\\\")}());for(var o=0;o<a;o++)t()[r+o>>0>>>0]=e.Wa();return 0},a:P||s.wasmMemory,C:et,e:function(e,t,n,r){return et(e,t,n,r)}};!function(){function e(e,t){s.asm=e.exports,fe.$a.push(s.asm.wa),$=s.asm.za,J.unshift(s.asm._),k=t,O||(Z--,s.monitorRunDependencies&&s.monitorRunDependencies(Z),0==Z&&(null!==ee&&(clearInterval(ee),ee=null),te&&(e=te,te=null,e())))}function t(t){e(t.instance,t.module)}function n(e){return function(){if(!M&&(w||b)){if(\\\"function\\\"==typeof fetch&&!K.startsWith(\\\"file://\\\"))return fetch(K,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+K+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return ae()}));if(f)return new Promise((function(e,t){f(K,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return ae()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\\\"failed to asynchronously prepare wasm: \\\"+e),ne(e)}))}var r={a:nt};if(O||(Z++,s.monitorRunDependencies&&s.monitorRunDependencies(Z)),s.instantiateWasm)try{return s.instantiateWasm(r,e)}catch(e){return x(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(M||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||re()||K.startsWith(\\\"file://\\\")||_||\\\"function\\\"!=typeof fetch?n(t):fetch(K,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(t,(function(e){return x(\\\"wasm streaming compile failed: \\\"+e),x(\\\"falling back to ArrayBuffer instantiation\\\"),n(t)}))}))).catch(c)}(),s.___wasm_call_ctors=function(){return(s.___wasm_call_ctors=s.asm._).apply(null,arguments)},s._OrtInit=function(){return(s._OrtInit=s.asm.$).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.aa).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.ba).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ca).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.da).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ea).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.fa).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.ga).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.ha).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.ia).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ja).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ka).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.la).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ma).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.na).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.oa).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.pa).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.qa).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.ra).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.sa).apply(null,arguments)};var rt=s._pthread_self=function(){return(rt=s._pthread_self=s.asm.ta).apply(null,arguments)},at=s._malloc=function(){return(at=s._malloc=s.asm.ua).apply(null,arguments)};s._free=function(){return(s._free=s.asm.va).apply(null,arguments)},s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.wa).apply(null,arguments)};var ot=s.__emscripten_thread_init=function(){return(ot=s.__emscripten_thread_init=s.asm.xa).apply(null,arguments)};s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.ya).apply(null,arguments)};var it,st=s._emscripten_run_in_main_runtime_thread_js=function(){return(st=s._emscripten_run_in_main_runtime_thread_js=s.asm.Aa).apply(null,arguments)},ut=s.__emscripten_proxy_execute_task_queue=function(){return(ut=s.__emscripten_proxy_execute_task_queue=s.asm.Ba).apply(null,arguments)},ct=s.__emscripten_thread_free_data=function(){return(ct=s.__emscripten_thread_free_data=s.asm.Ca).apply(null,arguments)},lt=s.__emscripten_thread_exit=function(){return(lt=s.__emscripten_thread_exit=s.asm.Da).apply(null,arguments)},ft=s._emscripten_stack_set_limits=function(){return(ft=s._emscripten_stack_set_limits=s.asm.Ea).apply(null,arguments)},pt=s.stackSave=function(){return(pt=s.stackSave=s.asm.Fa).apply(null,arguments)},dt=s.stackRestore=function(){return(dt=s.stackRestore=s.asm.Ga).apply(null,arguments)},mt=s.stackAlloc=function(){return(mt=s.stackAlloc=s.asm.Ha).apply(null,arguments)};function gt(){function e(){if(!it&&(it=!0,s.calledRun=!0,!H)&&(O||pe(J),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!O)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();Q.unshift(e)}pe(Q)}}if(!(0<Z))if(O)u(s),O||pe(J),postMessage({cmd:\\\"loaded\\\"});else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)X();pe(V),0<Z||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.___cxa_is_pointer_type=function(){return(s.___cxa_is_pointer_type=s.asm.Ia).apply(null,arguments)},s.UTF8ToString=z,s.stringToUTF8=function(e,t,n){return B(e,r(),t,n)},s.lengthBytesUTF8=N,s.keepRuntimeAlive=function(){return C},s.wasmMemory=P,s.stackSave=pt,s.stackRestore=dt,s.stackAlloc=mt,s.ExitStatus=ie,s.PThread=fe,te=function e(){it||gt(),it||(te=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return gt(),e.ready});e.exports=r},932:(e,t,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e){var t,r,a;e=e||{},t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){r=e,a=t}));var o,i,s,u,c,l,f=Object.assign({},t),p=\\\"./this.program\\\",d=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,g=\\\"function\\\"==typeof importScripts,h=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,y=\\\"\\\";h?(y=g?n(908).dirname(y)+\\\"/\\\":\\\"//\\\",l=()=>{c||(u=n(384),c=n(908))},o=function(e,t){return l(),e=c.normalize(e),u.readFileSync(e,t?void 0:\\\"utf8\\\")},s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n)=>{l(),e=c.normalize(e),u.readFile(e,(function(e,r){e?n(e):t(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof $))throw e})),process.on(\\\"unhandledRejection\\\",(function(e){throw e})),d=(e,t)=>{if(_)throw process.exitCode=e,t;t instanceof $||b(\\\"exiting due to exception: \\\"+t),process.exit(e)},t.inspect=function(){return\\\"[Emscripten Module object]\\\"}):(m||g)&&(g?y=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),y=0!==y.indexOf(\\\"blob:\\\")?y.substr(0,y.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},g&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var v,w=t.print||console.log.bind(console),b=t.printErr||console.warn.bind(console);Object.assign(t,f),f=null,t.thisProgram&&(p=t.thisProgram),t.quit&&(d=t.quit),t.wasmBinary&&(v=t.wasmBinary);var _=t.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var O,S,T,A,E,M,R=!1,x=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function C(e,t,n){var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&x)return x.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function P(e,t){return(e>>>=0)?C(A,e,t):\\\"\\\"}function k(e,t,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a}function D(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t}function F(){var e=O.buffer;S=e,t.HEAP8=T=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=E=new Int32Array(e),t.HEAPU8=A=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=M=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var U=[],I=[],W=[];function j(){var e=t.preRun.shift();U.unshift(e)}var H,L=0,Y=null,z=null;function B(e){throw t.onAbort&&t.onAbort(e),b(e=\\\"Aborted(\\\"+e+\\\")\\\"),R=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function N(){return H.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(H=\\\"ort-wasm.wasm\\\",!N()){var G=H;H=t.locateFile?t.locateFile(G,y):y+G}function q(){var e=H;try{if(e==H&&v)return new Uint8Array(v);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){B(e)}}function $(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function V(e){for(;0<e.length;)e.shift()(t)}function J(e){this.sa=e-24,this.Ia=function(e){M[this.sa+4>>2>>>0]=e},this.Ba=function(e){M[this.sa+8>>2>>>0]=e},this.Ga=function(){E[this.sa>>2>>>0]=0},this.Aa=function(){T[this.sa+12>>0>>>0]=0},this.Ha=function(){T[this.sa+13>>0>>>0]=0},this.ya=function(e,t){this.za(),this.Ia(e),this.Ba(t),this.Ga(),this.Aa(),this.Ha()},this.za=function(){M[this.sa+16>>2>>>0]=0}}function Q(e){var t=D(e)+1,n=ie(t);return n&&k(e,T,n,t),n}var X={};function K(){if(!Z){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:p||\\\"./this.program\\\"};for(e in X)void 0===X[e]?delete t[e]:t[e]=X[e];var n=[];for(e in t)n.push(e+\\\"=\\\"+t[e]);Z=n}return Z}var Z,ee=[null,[],[]];function te(e){return 0==e%4&&(0!=e%100||0==e%400)}var ne=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function ae(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.qa;for(e=new Date(new Date(e.ra+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(te(e.getFullYear())?ne:re)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),n=s(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=E[r+40>>2>>>0];for(var l in r={Ea:E[r>>2>>>0],Da:E[r+4>>2>>>0],ta:E[r+8>>2>>>0],va:E[r+12>>2>>>0],ua:E[r+16>>2>>>0],ra:E[r+20>>2>>>0],la:E[r+24>>2>>>0],qa:E[r+28>>2>>>0],Ja:E[r+32>>2>>>0],Ca:E[r+36>>2>>>0],Fa:c?P(c):\\\"\\\"},n=P(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.la].substring(0,3)},\\\"%A\\\":function(e){return f[e.la]},\\\"%b\\\":function(e){return p[e.ua].substring(0,3)},\\\"%B\\\":function(e){return p[e.ua]},\\\"%C\\\":function(e){return o((e.ra+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.va,2)},\\\"%e\\\":function(e){return a(e.va,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.ta,2)},\\\"%I\\\":function(e){return 0==(e=e.ta)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,n=0;n<=e.ua-1;t+=(te(e.ra+1900)?ne:re)[n++]);return o(e.va+t,3)},\\\"%m\\\":function(e){return o(e.ua+1,2)},\\\"%M\\\":function(e){return o(e.Da,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.ta&&12>e.ta?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.Ea,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.la||7},\\\"%U\\\":function(e){return o(Math.floor((e.qa+7-e.la)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.qa+7-(e.la+6)%7)/7);if(2>=(e.la+371-e.qa-2)%7&&t++,t)53==t&&(4==(n=(e.la+371-e.qa)%7)||3==n&&te(e.ra)||(t=1));else{t=52;var n=(e.la+7-e.qa-1)%7;(4==n||5==n&&te(e.ra%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.la},\\\"%W\\\":function(e){return o(Math.floor((e.qa+7-(e.la+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.ra+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.ra+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Ca);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Fa},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),c[l](r)));return l=function(e){var t=Array(D(e)+1);return k(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(T.set(l,e>>>0),l.length-1)}var oe={a:function(e){return ie(e+24)+24},b:function(e,t,n){throw new J(e).ya(t,n),e},g:function(){return 0},I:function(){},w:function(){},y:function(){},K:function(){return 0},G:function(){},C:function(){},F:function(){},k:function(){},x:function(){},u:function(){},H:function(){},v:function(){},n:function(){},p:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},o:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},l:function(){return Date.now()},L:function(){return!0},M:function(e,t){e=new Date(1e3*(M[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getUTCSeconds(),E[t+4>>2>>>0]=e.getUTCMinutes(),E[t+8>>2>>>0]=e.getUTCHours(),E[t+12>>2>>>0]=e.getUTCDate(),E[t+16>>2>>>0]=e.getUTCMonth(),E[t+20>>2>>>0]=e.getUTCFullYear()-1900,E[t+24>>2>>>0]=e.getUTCDay(),E[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},N:function(e,t){e=new Date(1e3*(M[e>>>2]+4294967296*E[e+4>>>2])),E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),E[t+20>>2>>>0]=e.getFullYear()-1900,E[t+24>>2>>>0]=e.getDay();var n=new Date(e.getFullYear(),0,1);E[t+28>>2>>>0]=(e.getTime()-n.getTime())/864e5|0,E[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},O:function(e){var t=new Date(E[e+20>>2>>>0]+1900,E[e+16>>2>>>0],E[e+12>>2>>>0],E[e+8>>2>>>0],E[e+4>>2>>>0],E[e>>2>>>0],0),n=E[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),0,1),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=a.getTimezoneOffset(),s=Math.min(i,o);return 0>n?E[e+32>>2>>>0]=Number(o!=i&&s==r):0<n!=(s==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?s:o)-r))),E[e+24>>2>>>0]=t.getDay(),E[e+28>>2>>>0]=(t.getTime()-a.getTime())/864e5|0,E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),t.getTime()/1e3|0},z:function(){return-52},B:function(){},m:function e(t,n,r){e.xa||(e.xa=!0,function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();E[e>>2>>>0]=60*Math.max(a,s),E[t>>2>>>0]=Number(a!=s),e=r(o),t=r(i),e=Q(e),t=Q(t),s<a?(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t):(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e)}(t,n,r))},d:function(){B(\\\"\\\")},t:function(){return 4294901760},h:h?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),J:function(e,t,n){A.copyWithin(e>>>0,t>>>0,t+n>>>0)},f:function(e){var t=A.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);e:{try{O.grow(a-S.byteLength+65535>>>16),F();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},D:function(e,t){var n=0;return K().forEach((function(r,a){var o=t+n;for(a=M[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)T[a++>>0>>>0]=r.charCodeAt(o);T[a>>0>>>0]=0,n+=r.length+1})),0},E:function(e,t){var n=K();M[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),M[t>>2>>>0]=r,0},r:function(e){_||(t.onExit&&t.onExit(e),R=!0),d(e,new $(e))},e:function(){return 52},j:function(){return 52},q:function(){return 70},i:function(e,t,n,r){for(var a=0,o=0;o<n;o++){var i=M[t>>2>>>0],s=M[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=A[i+u>>>0],l=ee[e];0===c||10===c?((1===e?w:b)(C(l,0)),l.length=0):l.push(c)}a+=s}return M[r>>2>>>0]=a,0},s:function e(t,r){e.wa||(e.wa=function(){if(\\\"object\\\"==typeof crypto&&\\\"function\\\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}if(h)try{var t=n(760);return()=>t.randomBytes(1)[0]}catch(e){}return()=>B(\\\"randomDevice\\\")}());for(var a=0;a<r;a++)T[t+a>>0>>>0]=e.wa();return 0},A:ae,c:function(e,t,n,r){return ae(e,t,n,r)}};!function(){function e(e){t.asm=e.exports,O=t.asm.P,F(),I.unshift(t.asm.Q),L--,t.monitorRunDependencies&&t.monitorRunDependencies(L),0==L&&(null!==Y&&(clearInterval(Y),Y=null),z&&(e=z,z=null,e()))}function n(t){e(t.instance)}function r(e){return function(){if(!v&&(m||g)){if(\\\"function\\\"==typeof fetch&&!H.startsWith(\\\"file://\\\"))return fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){if(!e.ok)throw\\\"failed to load wasm binary file at '\\\"+H+\\\"'\\\";return e.arrayBuffer()})).catch((function(){return q()}));if(i)return new Promise((function(e,t){i(H,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return q()}))}().then((function(e){return WebAssembly.instantiate(e,o)})).then((function(e){return e})).then(e,(function(e){b(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}var o={a:oe};if(L++,t.monitorRunDependencies&&t.monitorRunDependencies(L),t.instantiateWasm)try{return t.instantiateWasm(o,e)}catch(e){return b(\\\"Module.instantiateWasm callback failed with error: \\\"+e),!1}(v||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||N()||H.startsWith(\\\"file://\\\")||h||\\\"function\\\"!=typeof fetch?r(n):fetch(H,{credentials:\\\"same-origin\\\"}).then((function(e){return WebAssembly.instantiateStreaming(e,o).then(n,(function(e){return b(\\\"wasm streaming compile failed: \\\"+e),b(\\\"falling back to ArrayBuffer instantiation\\\"),r(n)}))}))).catch(a)}(),t.___wasm_call_ctors=function(){return(t.___wasm_call_ctors=t.asm.Q).apply(null,arguments)},t._OrtInit=function(){return(t._OrtInit=t.asm.R).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.S).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.T).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.U).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.V).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.W).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.X).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.Y).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.Z).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm._).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.$).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.aa).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.ba).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ca).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.da).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.ea).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.fa).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ga).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ha).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.ia).apply(null,arguments)};var ie=t._malloc=function(){return(ie=t._malloc=t.asm.ja).apply(null,arguments)};t._free=function(){return(t._free=t.asm.ka).apply(null,arguments)};var se,ue=t.stackSave=function(){return(ue=t.stackSave=t.asm.ma).apply(null,arguments)},ce=t.stackRestore=function(){return(ce=t.stackRestore=t.asm.na).apply(null,arguments)},le=t.stackAlloc=function(){return(le=t.stackAlloc=t.asm.oa).apply(null,arguments)};function fe(){function e(){if(!se&&(se=!0,t.calledRun=!0,!R)){if(V(I),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();W.unshift(e)}V(W)}}if(!(0<L)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)j();V(U),0<L||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.___cxa_is_pointer_type=function(){return(t.___cxa_is_pointer_type=t.asm.pa).apply(null,arguments)},t.UTF8ToString=P,t.stringToUTF8=function(e,t,n){return k(e,A,t,n)},t.lengthBytesUTF8=D,t.stackSave=ue,t.stackRestore=ce,t.stackAlloc=le,z=function e(){se||fe(),se||(z=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return fe(),e.ready});e.exports=r},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},t=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(t){var r=require(\\\"worker_threads\\\"),a=r.parentPort;a.on(\\\"message\\\",(e=>onmessage({data:e})));var o=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,\\\"utf8\\\"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");t?o.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if(\\\"load\\\"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if(\\\"run\\\"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if(\\\"unwind\\\"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else\\\"cancel\\\"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===t.data.target||(\\\"processProxyingQueue\\\"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i(\\\"worker.js received unknown command \\\"+t.data.cmd),i(t.data)))}catch(t){throw i(\\\"worker.js onmessage() captured an uncaught exception: \\\"+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\\\n'},760:()=>{},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=n(259),t=n(263);self.onmessage=n=>{switch(n.data.type){case\\\"init-wasm\\\":(0,t.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:r}=n.data.in;(0,e.initOrt)(t,r),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=n.data.in,r=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:r})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:r}=n.data.in,a=(0,e.createSessionFinalize)(t,r);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:r}=n.data.in,a=(0,e.createSession)(t,r);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=n.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:r,inputs:a,outputIndices:o,options:i}=n.data.in;(0,e.run)(t,r,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=n.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function n(){return k.buffer!=C&&B(k.buffer),F}function t(){return k.buffer!=C&&B(k.buffer),P}function r(){return k.buffer!=C&&B(k.buffer),I}function a(){return k.buffer!=C&&B(k.buffer),U}function o(){return k.buffer!=C&&B(k.buffer),Y}var u,i,s;e=e||{},u||(u=void 0!==e?e:{}),u.ready=new Promise((function(e,n){i=e,s=n}));var f,c,l,p,m,d,h=Object.assign({},u),g=\"./this.program\",y=(e,n)=>{throw n},_=\"object\"==typeof window,b=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=u.ENVIRONMENT_IS_PTHREAD||!1,O=\"\";function T(e){return u.locateFile?u.locateFile(e,O):O+e}if(v){let e;O=b?require(\"path\").dirname(O)+\"/\":__dirname+\"/\",d=()=>{m||(p=require(\"fs\"),m=require(\"path\"))},f=function(e,n){return d(),e=m.normalize(e),p.readFileSync(e,n?void 0:\"utf8\")},l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t)=>{d(),e=m.normalize(e),p.readFile(e,(function(e,r){e?t(e):n(r.buffer)}))},1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof oe))throw e})),process.on(\"unhandledRejection\",(function(e){throw e})),y=(e,n)=>{if(E)throw process.exitCode=e,n;n instanceof oe||x(\"exiting due to exception: \"+n),process.exit(e)},u.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(_||b)&&(b?O=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(O=document.currentScript.src),_scriptDir&&(O=_scriptDir),O=0!==O.indexOf(\"blob:\")?O.substr(0,O.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},b&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),S=console.warn.bind(console);v&&(d(),M=e=>p.writeSync(1,e+\"\\n\"),S=e=>p.writeSync(2,e+\"\\n\"));var A,R=u.print||M,x=u.printErr||S;Object.assign(u,h),h=null,u.thisProgram&&(g=u.thisProgram),u.quit&&(y=u.quit),u.wasmBinary&&(A=u.wasmBinary);var E=u.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ne(\"no native wasm support detected\");var k,D,C,F,P,I,U,Y,W=!1,H=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function j(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&H)return H.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var u=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|u:(7&a)<<18|o<<12|u<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function N(e,n){return(e>>>=0)?j(t(),e,n):\"\"}function L(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var o=0;o<e.length;++o){var u=e.charCodeAt(o);if(55296<=u&&57343>=u&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),127>=u){if(t>=r)break;n[t++>>>0]=u}else{if(2047>=u){if(t+1>=r)break;n[t++>>>0]=192|u>>6}else{if(65535>=u){if(t+2>=r)break;n[t++>>>0]=224|u>>12}else{if(t+3>=r)break;n[t++>>>0]=240|u>>18,n[t++>>>0]=128|u>>12&63}n[t++>>>0]=128|u>>6&63}n[t++>>>0]=128|63&u}}return n[t>>>0]=0,t-a}function q(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function B(e){C=e,u.HEAP8=F=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=I=new Int32Array(e),u.HEAPU8=P=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=U=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=Y=new Float64Array(e)}w&&(C=u.buffer);var G=u.INITIAL_MEMORY||16777216;if(w)k=u.wasmMemory,C=u.buffer;else if(u.wasmMemory)k=u.wasmMemory;else if(!((k=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");k&&(C=k.buffer),G=C.byteLength,B(C);var z,J=[],K=[],Q=[];function V(){var e=u.preRun.shift();J.unshift(e)}var X,Z=0,$=null,ee=null;function ne(e){throw w?postMessage({cmd:\"onAbort\",arg:e}):u.onAbort&&u.onAbort(e),x(e=\"Aborted(\"+e+\")\"),W=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function te(){return X.startsWith(\"data:application/octet-stream;base64,\")}function re(){var e=X;try{if(e==X&&A)return new Uint8Array(A);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){ne(e)}}X=\"ort-wasm-threaded.wasm\",te()||(X=T(X));var ae={};function oe(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ue(e){(e=ce.La[e])||ne(),ce.Xa(e)}function ie(e){var n=ce.lb();if(!n)return 6;ce.Ra.push(n),ce.La[e.Ka]=n,n.Ka=e.Ka;var t={cmd:\"run\",start_routine:e.pb,arg:e.ib,pthread_ptr:e.Ka};return n.Qa=()=>{t.time=performance.now(),n.postMessage(t,e.vb)},n.loaded&&(n.Qa(),delete n.Qa),0}function se(e){if(w)return We(1,1,e);E||(ce.qb(),u.onExit&&u.onExit(e),W=!0),y(e,new oe(e))}function fe(e,n){if(!n&&w)throw pe(e),\"unwind\";se(e)}var ce={Oa:[],Ra:[],$a:[],La:{},Ua:function(){w&&ce.mb()},xb:function(){},mb:function(){ce.receiveObjectTransfer=ce.ob,ce.threadInitTLS=ce.Za,ce.setExitStatus=ce.Ya,E=!1},Ya:function(){},qb:function(){for(var e of Object.values(ce.La))ce.Xa(e);for(e of ce.Oa)e.terminate();ce.Oa=[]},Xa:function(e){var n=e.Ka;delete ce.La[n],ce.Oa.push(e),ce.Ra.splice(ce.Ra.indexOf(e),1),e.Ka=0,fn(n)},ob:function(){},Za:function(){ce.$a.forEach((e=>e()))},nb:function(e,n){e.onmessage=t=>{var r=(t=t.data).cmd;if(e.Ka&&(ce.kb=e.Ka),t.targetThread&&t.targetThread!=tn()){var a=ce.La[t.yb];a?a.postMessage(t,t.transferList):x('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===r?Ce(t.queue):\"spawnThread\"===r?ie(t):\"cleanupThread\"===r?ue(t.thread):\"killThread\"===r?(t=t.thread,r=ce.La[t],delete ce.La[t],r.terminate(),fn(t),ce.Ra.splice(ce.Ra.indexOf(r),1),r.Ka=0):\"cancelThread\"===r?ce.La[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n&&n(e),e.Qa&&(e.Qa(),delete e.Qa)):\"print\"===r?R(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?x(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"onAbort\"===r?u.onAbort&&u.onAbort(t.arg):r&&x(\"worker sent an unknown command \"+r);ce.kb=void 0},e.onerror=e=>{throw x(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){}))),e.postMessage({cmd:\"load\",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:k,wasmModule:D})},hb:function(){var e=T(\"ort-wasm-threaded.worker.js\");ce.Oa.push(new Worker(e))},lb:function(){return 0==ce.Oa.length&&(ce.hb(),ce.nb(ce.Oa[0])),ce.Oa.pop()}};function le(e){for(;0<e.length;)e.shift()(u)}function pe(e){if(w)return We(2,0,e);try{fe(e)}catch(e){e instanceof oe||\"unwind\"==e||y(1,e)}}u.PThread=ce,u.establishStackSpace=function(){var e=tn(),n=r()[e+44>>2>>>0];e=r()[e+48>>2>>>0],ln(n,n-e),mn(n)};var me,de,he=[];function ge(e){this.Pa=e-24,this.gb=function(e){a()[this.Pa+4>>2>>>0]=e},this.cb=function(e){a()[this.Pa+8>>2>>>0]=e},this.eb=function(){r()[this.Pa>>2>>>0]=0},this.bb=function(){n()[this.Pa+12>>0>>>0]=0},this.fb=function(){n()[this.Pa+13>>0>>>0]=0},this.Ua=function(e,n){this.ab(),this.gb(e),this.cb(n),this.eb(),this.bb(),this.fb()},this.ab=function(){a()[this.Pa+16>>2>>>0]=0}}function ye(e,n,t,r){return w?We(3,1,e,n,t,r):_e(e,n,t,r)}function _e(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return x(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?ye(e,n,t,r):(e={pb:t,Ka:e,ib:r,vb:a},w?(e.wb=\"spawnThread\",postMessage(e,a),0):ie(e))}function be(e,n,t){return w?We(4,1,e,n,t):0}function ve(e,n){if(w)return We(5,1,e,n)}function we(e,n){if(w)return We(6,1,e,n)}function Oe(e,n,t){if(w)return We(7,1,e,n,t)}function Te(e,n,t){return w?We(8,1,e,n,t):0}function Me(e,n){if(w)return We(9,1,e,n)}function Se(e,n,t){if(w)return We(10,1,e,n,t)}function Ae(e,n,t,r){if(w)return We(11,1,e,n,t,r)}function Re(e,n,t,r){if(w)return We(12,1,e,n,t,r)}function xe(e,n,t,r){if(w)return We(13,1,e,n,t,r)}function Ee(e){if(w)return We(14,1,e)}function ke(e,n){if(w)return We(15,1,e,n)}function De(e,n,t){if(w)return We(16,1,e,n,t)}function Ce(e){Atomics.store(r(),e>>2,1),tn()&&sn(e),Atomics.compareExchange(r(),e>>2,1,0)}function Fe(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Pe(e,n,t,r,a,o){return w?We(17,1,e,n,t,r,a,o):-52}function Ie(e,n,t,r,a,o){if(w)return We(18,1,e,n,t,r,a,o)}function Ue(e){var t=q(e)+1,r=rn(t);return r&&L(e,n(),r,t),r}function Ye(e,n,t){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}if(w)return We(19,1,e,n,t);var u=(new Date).getFullYear(),i=new Date(u,0,1),s=new Date(u,6,1);u=i.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(u,f);r()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(u!=f),e=o(i),n=o(s),e=Ue(e),n=Ue(n),f<u?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)}function We(e,n){var t=arguments.length-2,r=arguments;return function(e){var n=pn();return e=e(),mn(n),e}((()=>{for(var a=dn(8*t),u=a>>3,i=0;i<t;i++){var s=r[2+i];o()[u+i>>>0]=s}return un(e,t,a,n)}))}u.invokeEntryPoint=function(e,n){var t=he[e];t||(e>=he.length&&(he.length=e+1),he[e]=t=z.get(e)),e=t(n),E?ce.Ya(e):cn(e)},u.executeNotifiedProxyingQueue=Ce,de=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:w?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var He,je=[],Ne={};function Le(){if(!He){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"};for(e in Ne)void 0===Ne[e]?delete n[e]:n[e]=Ne[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);He=t}return He}function qe(e,t){if(w)return We(20,1,e,t);var r=0;return Le().forEach((function(o,u){var i=t+r;for(u=a()[e+4*u>>2>>>0]=i,i=0;i<o.length;++i)n()[u++>>0>>>0]=o.charCodeAt(i);n()[u>>0>>>0]=0,r+=o.length+1})),0}function Be(e,n){if(w)return We(21,1,e,n);var t=Le();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Ge(e){return w?We(22,1,e):52}function ze(e,n,t,r){return w?We(23,1,e,n,t,r):52}function Je(e,n,t,r,a){return w?We(24,1,e,n,t,r,a):70}var Ke=[null,[],[]];function Qe(e,n,r,o){if(w)return We(25,1,e,n,r,o);for(var u=0,i=0;i<r;i++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++){var l=t()[s+c>>>0],p=Ke[e];0===l||10===l?((1===e?R:x)(j(p,0)),p.length=0):p.push(l)}u+=f}return a()[o>>2>>>0]=u,0}function Ve(e){return 0==e%4&&(0!=e%100||0==e%400)}var Xe=[31,29,31,30,31,30,31,31,30,31,30,31],Ze=[31,28,31,30,31,30,31,31,30,31,30,31];function $e(e,t,a,o){function u(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function i(e,n){return u(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Ma;for(e=new Date(new Date(e.Na+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(Ve(e.getFullYear())?Xe:Ze)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[o+40>>2>>>0];for(var p in o={tb:r()[o>>2>>>0],sb:r()[o+4>>2>>>0],Sa:r()[o+8>>2>>>0],Va:r()[o+12>>2>>>0],Ta:r()[o+16>>2>>>0],Na:r()[o+20>>2>>>0],Ja:r()[o+24>>2>>>0],Ma:r()[o+28>>2>>>0],zb:r()[o+32>>2>>>0],rb:r()[o+36>>2>>>0],ub:l?N(l):\"\"},a=N(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ja].substring(0,3)},\"%A\":function(e){return m[e.Ja]},\"%b\":function(e){return d[e.Ta].substring(0,3)},\"%B\":function(e){return d[e.Ta]},\"%C\":function(e){return i((e.Na+1900)/100|0,2)},\"%d\":function(e){return i(e.Va,2)},\"%e\":function(e){return u(e.Va,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return i(e.Sa,2)},\"%I\":function(e){return 0==(e=e.Sa)?e=12:12<e&&(e-=12),i(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Ta-1;n+=(Ve(e.Na+1900)?Xe:Ze)[t++]);return i(e.Va+n,3)},\"%m\":function(e){return i(e.Ta+1,2)},\"%M\":function(e){return i(e.sb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Sa&&12>e.Sa?\"AM\":\"PM\"},\"%S\":function(e){return i(e.tb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ja||7},\"%U\":function(e){return i(Math.floor((e.Ma+7-e.Ja)/7),2)},\"%V\":function(e){var n=Math.floor((e.Ma+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Ma-2)%7&&n++,n)53==n&&(4==(t=(e.Ja+371-e.Ma)%7)||3==t&&Ve(e.Na)||(n=1));else{n=52;var t=(e.Ja+7-e.Ma-1)%7;(4==t||5==t&&Ve(e.Na%400-1))&&n++}return i(n,2)},\"%w\":function(e){return e.Ja},\"%W\":function(e){return i(Math.floor((e.Ma+7-(e.Ja+6)%7)/7),2)},\"%y\":function(e){return(e.Na+1900).toString().substring(2)},\"%Y\":function(e){return e.Na+1900},\"%z\":function(e){var n=0<=(e=e.rb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.ub},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](o)));return p=function(e){var n=Array(q(e)+1);return L(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}ce.Ua();var en=[null,se,pe,ye,be,ve,we,Oe,Te,Me,Se,Ae,Re,xe,Ee,ke,De,Pe,Ie,Ye,qe,Be,Ge,ze,Je,Qe],nn={b:function(e){return rn(e+24)+24},c:function(e,n,t){throw new ge(e).Ua(n,t),e},L:function(e){an(e,!b,1,!_),ce.Za()},l:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):ue(e)},D:_e,i:be,R:ve,z:we,B:Oe,T:Te,P:Me,I:Se,O:Ae,p:Re,A:xe,x:Ee,Q:ke,y:De,r:function(){},j:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},s:function(){ne(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},q:function(){return Date.now()},E:function(){return 2097152},V:function(){return!0},F:function(e,n,t,r){if(e==n)setTimeout((()=>Ce(r)));else if(w)postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:r});else{if(!(e=ce.La[e]))return;e.postMessage({cmd:\"processProxyingQueue\",queue:r})}return 1},K:function(){return-1},W:function(e,n){e=new Date(1e3*Fe(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},X:function(e,n){e=new Date(1e3*Fe(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=new Date(e.getFullYear(),0,1),a=(e.getTime()-t.getTime())/864e5|0;r()[n+28>>2>>>0]=a,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),a=new Date(e.getFullYear(),6,1).getTimezoneOffset(),e=0|(a!=(t=t.getTimezoneOffset())&&e.getTimezoneOffset()==Math.min(t,a)),r()[n+32>>2>>>0]=e},Y:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),o=new Date(n.getFullYear(),0,1),u=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=o.getTimezoneOffset(),s=Math.min(i,u);return 0>t?r()[e+32>>2>>>0]=Number(u!=i&&s==a):0<t!=(s==a)&&(u=Math.max(i,u),n.setTime(n.getTime()+6e4*((0<t?s:u)-a))),r()[e+24>>2>>>0]=n.getDay(),t=(n.getTime()-o.getTime())/864e5|0,r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),n.getTime()/1e3|0},G:Pe,H:Ie,Z:function e(n,t,r){e.jb||(e.jb=!0,Ye(n,t,r))},d:function(){ne(\"\")},m:function(){if(!v&&!b){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";me||(me={}),me[e]||(me[e]=1,v&&(e=\"warning: \"+e),x(e))}},w:function(){return 4294901760},f:de,S:function(e,n,r){t().copyWithin(e>>>0,n>>>0,n+r>>>0)},g:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},J:function(e,n,t){je.length=n,t>>=3;for(var r=0;r<n;r++)je[r]=o()[t+r>>>0];return(0>e?ae[-e-1]:en[e]).apply(null,je)},v:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a),o=o.min.call(o,4294901760,a+(65536-a%65536)%65536);e:{try{k.grow(o-C.byteLength+65535>>>16),B(k.buffer);var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},U:function(){throw\"unwind\"},M:qe,N:Be,k:fe,h:Ge,o:ze,t:Je,n:Qe,u:function e(t,r){e.Wa||(e.Wa=function(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}if(v)try{var n=require(\"crypto\");return()=>n.randomBytes(1)[0]}catch(e){}return()=>ne(\"randomDevice\")}());for(var a=0;a<r;a++)n()[t+a>>0>>>0]=e.Wa();return 0},a:k||u.wasmMemory,C:$e,e:function(e,n,t,r){return $e(e,n,t,r)}};!function(){function e(e,n){u.asm=e.exports,ce.$a.push(u.asm.wa),z=u.asm.za,K.unshift(u.asm._),D=n,w||(Z--,u.monitorRunDependencies&&u.monitorRunDependencies(Z),0==Z&&(null!==$&&(clearInterval($),$=null),ee&&(e=ee,ee=null,e())))}function n(n){e(n.instance,n.module)}function t(e){return function(){if(!A&&(_||b)){if(\"function\"==typeof fetch&&!X.startsWith(\"file://\"))return fetch(X,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+X+\"'\";return e.arrayBuffer()})).catch((function(){return re()}));if(c)return new Promise((function(e,n){c(X,(function(n){e(new Uint8Array(n))}),n)}))}return Promise.resolve().then((function(){return re()}))}().then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(e,(function(e){x(\"failed to asynchronously prepare wasm: \"+e),ne(e)}))}var r={a:nn};if(w||(Z++,u.monitorRunDependencies&&u.monitorRunDependencies(Z)),u.instantiateWasm)try{return u.instantiateWasm(r,e)}catch(e){return x(\"Module.instantiateWasm callback failed with error: \"+e),!1}(A||\"function\"!=typeof WebAssembly.instantiateStreaming||te()||X.startsWith(\"file://\")||v||\"function\"!=typeof fetch?t(n):fetch(X,{credentials:\"same-origin\"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return x(\"wasm streaming compile failed: \"+e),x(\"falling back to ArrayBuffer instantiation\"),t(n)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm._).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.$).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.aa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.ba).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.ca).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.da).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.ea).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.fa).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.ga).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.ha).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.ia).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.ja).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ka).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.la).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.ma).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.na).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.oa).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.pa).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.qa).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.ra).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.sa).apply(null,arguments)};var tn=u._pthread_self=function(){return(tn=u._pthread_self=u.asm.ta).apply(null,arguments)},rn=u._malloc=function(){return(rn=u._malloc=u.asm.ua).apply(null,arguments)};u._free=function(){return(u._free=u.asm.va).apply(null,arguments)},u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.wa).apply(null,arguments)};var an=u.__emscripten_thread_init=function(){return(an=u.__emscripten_thread_init=u.asm.xa).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.ya).apply(null,arguments)};var on,un=u._emscripten_run_in_main_runtime_thread_js=function(){return(un=u._emscripten_run_in_main_runtime_thread_js=u.asm.Aa).apply(null,arguments)},sn=u.__emscripten_proxy_execute_task_queue=function(){return(sn=u.__emscripten_proxy_execute_task_queue=u.asm.Ba).apply(null,arguments)},fn=u.__emscripten_thread_free_data=function(){return(fn=u.__emscripten_thread_free_data=u.asm.Ca).apply(null,arguments)},cn=u.__emscripten_thread_exit=function(){return(cn=u.__emscripten_thread_exit=u.asm.Da).apply(null,arguments)},ln=u._emscripten_stack_set_limits=function(){return(ln=u._emscripten_stack_set_limits=u.asm.Ea).apply(null,arguments)},pn=u.stackSave=function(){return(pn=u.stackSave=u.asm.Fa).apply(null,arguments)},mn=u.stackRestore=function(){return(mn=u.stackRestore=u.asm.Ga).apply(null,arguments)},dn=u.stackAlloc=function(){return(dn=u.stackAlloc=u.asm.Ha).apply(null,arguments)};function hn(){function e(){if(!on&&(on=!0,u.calledRun=!0,!W)&&(w||le(K),i(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!w)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();Q.unshift(e)}le(Q)}}if(!(0<Z))if(w)i(u),w||le(K),postMessage({cmd:\"loaded\"});else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)V();le(J),0<Z||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),e()}),1)):e())}}if(u.___cxa_is_pointer_type=function(){return(u.___cxa_is_pointer_type=u.asm.Ia).apply(null,arguments)},u.UTF8ToString=N,u.stringToUTF8=function(e,n,r){return L(e,t(),n,r)},u.lengthBytesUTF8=q,u.keepRuntimeAlive=function(){return E},u.wasmMemory=k,u.stackSave=pn,u.stackRestore=mn,u.stackAlloc=dn,u.ExitStatus=oe,u.PThread=ce,ee=function e(){on||hn(),on||(ee=e)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return hn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (() => {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nnull;var b;b||(b=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,k;b.ready=new Promise(function(a,c){aa=a;k=c});var ba=Object.assign({},b),p=\"./this.program\",t=(a,c)=>{throw c;},ca=\"object\"==typeof window,u=\"function\"==typeof importScripts,x=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",z,A,C,fs,D,E;\r\nif(x)y=u?require(\"path\").dirname(y)+\"/\":__dirname+\"/\",E=()=>{D||(fs=require(\"fs\"),D=require(\"path\"))},z=function(a,c){E();a=D.normalize(a);return fs.readFileSync(a,c?void 0:\"utf8\")},C=a=>{a=z(a,!0);a.buffer||(a=new Uint8Array(a));return a},A=(a,c,e)=>{E();a=D.normalize(a);fs.readFile(a,function(f,g){f?e(f):c(g.buffer)})},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",function(a){if(!(a instanceof F))throw a;}),process.on(\"unhandledRejection\",\r\nfunction(a){throw a;}),t=(a,c)=>{if(noExitRuntime)throw process.exitCode=a,c;c instanceof F||G(\"exiting due to exception: \"+c);process.exit(a)},b.inspect=function(){return\"[Emscripten Module object]\"};else if(ca||u)u?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",z=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.send(null);return c.responseText},\r\nu&&(C=a=>{var c=new XMLHttpRequest;c.open(\"GET\",a,!1);c.responseType=\"arraybuffer\";c.send(null);return new Uint8Array(c.response)}),A=(a,c,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?c(f.response):e()};f.onerror=e;f.send(null)};var da=b.print||console.log.bind(console),G=b.printErr||console.warn.bind(console);Object.assign(b,ba);ba=null;b.thisProgram&&(p=b.thisProgram);b.quit&&(t=b.quit);var H;\r\nb.wasmBinary&&(H=b.wasmBinary);var noExitRuntime=b.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&I(\"no native wasm support detected\");var J,K=!1,ea=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction fa(a,c,e){c>>>=0;var f=c+e;for(e=c;a[e]&&!(e>=f);)++e;if(16<e-c&&a.buffer&&ea)return ea.decode(a.subarray(c,e));for(f=\"\";c<e;){var g=a[c++];if(g&128){var h=a[c++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|h);else{var l=a[c++]&63;g=224==(g&240)?(g&15)<<12|h<<6|l:(g&7)<<18|h<<12|l<<6|a[c++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function L(a,c){return(a>>>=0)?fa(M,a,c):\"\"}\r\nfunction N(a,c,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var h=0;h<a.length;++h){var l=a.charCodeAt(h);if(55296<=l&&57343>=l){var q=a.charCodeAt(++h);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;c[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;c[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;c[e++>>>0]=224|l>>12}else{if(e+3>=f)break;c[e++>>>0]=240|l>>18;c[e++>>>0]=128|l>>12&63}c[e++>>>0]=128|l>>6&63}c[e++>>>0]=128|l&63}}c[e>>>0]=0;return e-g}\r\nfunction O(a){for(var c=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?c++:2047>=f?c+=2:55296<=f&&57343>=f?(c+=4,++e):c+=3}return c}var ha,P,M,Q,R;function ia(){var a=J.buffer;ha=a;b.HEAP8=P=new Int8Array(a);b.HEAP16=new Int16Array(a);b.HEAP32=Q=new Int32Array(a);b.HEAPU8=M=new Uint8Array(a);b.HEAPU16=new Uint16Array(a);b.HEAPU32=R=new Uint32Array(a);b.HEAPF32=new Float32Array(a);b.HEAPF64=new Float64Array(a)}var ja=[],ka=[],la=[];function ma(){var a=b.preRun.shift();ja.unshift(a)}\r\nvar S=0,T=null,U=null;function I(a){if(b.onAbort)b.onAbort(a);a=\"Aborted(\"+a+\")\";G(a);K=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");k(a);throw a;}function na(){return V.startsWith(\"data:application/octet-stream;base64,\")}var V;V=\"ort-wasm.wasm\";if(!na()){var oa=V;V=b.locateFile?b.locateFile(oa,y):y+oa}function pa(){var a=V;try{if(a==V&&H)return new Uint8Array(H);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}catch(c){I(c)}}\r\nfunction qa(){if(!H&&(ca||u)){if(\"function\"==typeof fetch&&!V.startsWith(\"file://\"))return fetch(V,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+V+\"'\";return a.arrayBuffer()}).catch(function(){return pa()});if(A)return new Promise(function(a,c){A(V,function(e){a(new Uint8Array(e))},c)})}return Promise.resolve().then(function(){return pa()})}function F(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}\r\nfunction W(a){for(;0<a.length;)a.shift()(b)}function ra(a){this.sa=a-24;this.Ia=function(c){R[this.sa+4>>2>>>0]=c};this.Ba=function(c){R[this.sa+8>>2>>>0]=c};this.Ga=function(){Q[this.sa>>2>>>0]=0};this.Aa=function(){P[this.sa+12>>0>>>0]=0};this.Ha=function(){P[this.sa+13>>0>>>0]=0};this.ya=function(c,e){this.za();this.Ia(c);this.Ba(e);this.Ga();this.Aa();this.Ha()};this.za=function(){R[this.sa+16>>2>>>0]=0}}var sa=0;function ta(a){var c=O(a)+1,e=ua(c);e&&N(a,P,e,c);return e}\r\nfunction va(a,c,e){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}var g=(new Date).getFullYear(),h=new Date(g,0,1),l=new Date(g,6,1);g=h.getTimezoneOffset();var q=l.getTimezoneOffset();Q[a>>2>>>0]=60*Math.max(g,q);Q[c>>2>>>0]=Number(g!=q);a=f(h);c=f(l);a=ta(a);c=ta(c);q<g?(R[e>>2>>>0]=a,R[e+4>>2>>>0]=c):(R[e>>2>>>0]=c,R[e+4>>2>>>0]=a)}function wa(a,c,e){wa.xa||(wa.xa=!0,va(a,c,e))}var Aa={};\r\nfunction Ba(){if(!Ca){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:p||\"./this.program\"},c;for(c in Aa)void 0===Aa[c]?delete a[c]:a[c]=Aa[c];var e=[];for(c in a)e.push(c+\"=\"+a[c]);Ca=e}return Ca}var Ca,Da=[null,[],[]];\r\nfunction Ea(){if(\"object\"==typeof crypto&&\"function\"==typeof crypto.getRandomValues){var a=new Uint8Array(1);return()=>{crypto.getRandomValues(a);return a[0]}}if(x)try{var c=require(\"crypto\");return()=>c.randomBytes(1)[0]}catch(e){}return()=>I(\"randomDevice\")}function X(a,c){X.wa||(X.wa=Ea());for(var e=0;e<c;e++)P[a+e>>0>>>0]=X.wa();return 0}function Y(a){return 0===a%4&&(0!==a%100||0===a%400)}var Fa=[31,29,31,30,31,30,31,31,30,31,30,31],Ga=[31,28,31,30,31,30,31,31,30,31,30,31];\r\nfunction Ha(a){var c=Array(O(a)+1);N(a,c,0,c.length);return c}\r\nfunction Ia(a,c,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function h(d,m){return g(d,m,\"0\")}function l(d,m){function n(xa){return 0>xa?-1:0<xa?1:0}var B;0===(B=n(d.getFullYear()-m.getFullYear()))&&0===(B=n(d.getMonth()-m.getMonth()))&&(B=n(d.getDate()-m.getDate()));return B}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var m=d.qa;for(d=new Date((new Date(d.ra+1900,0,1)).getTime());0<m;){var n=d.getMonth(),B=(Y(d.getFullYear())?Fa:Ga)[n];if(m>B-d.getDate())m-=B-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\r\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var v=Q[f+40>>2>>>0];f={Ea:Q[f>>2>>>0],Da:Q[f+4>>2>>>0],ta:Q[f+8>>2>>>0],va:Q[f+12>>2>>>0],ua:Q[f+16>>2>>>0],ra:Q[f+20>>2>>>0],la:Q[f+24>>2>>>0],qa:Q[f+28>>2>>>0],Ja:Q[f+32>>2>>>0],Ca:Q[f+36>>2>>>0],Fa:v?L(v):\"\"};e=L(e);v={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\r\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in v)e=e.replace(new RegExp(r,\"g\"),v[r]);var ya=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),za=\"January February March April May June July August September October November December\".split(\" \");v={\"%a\":function(d){return ya[d.la].substring(0,3)},\"%A\":function(d){return ya[d.la]},\"%b\":function(d){return za[d.ua].substring(0,\r\n3)},\"%B\":function(d){return za[d.ua]},\"%C\":function(d){return h((d.ra+1900)/100|0,2)},\"%d\":function(d){return h(d.va,2)},\"%e\":function(d){return g(d.va,2,\" \")},\"%g\":function(d){return w(d).toString().substring(2)},\"%G\":function(d){return w(d)},\"%H\":function(d){return h(d.ta,2)},\"%I\":function(d){d=d.ta;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.ua-1;m+=(Y(d.ra+1900)?Fa:Ga)[n++]);return h(d.va+m,3)},\"%m\":function(d){return h(d.ua+1,2)},\"%M\":function(d){return h(d.Da,\r\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.ta&&12>d.ta?\"AM\":\"PM\"},\"%S\":function(d){return h(d.Ea,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.la||7},\"%U\":function(d){return h(Math.floor((d.qa+7-d.la)/7),2)},\"%V\":function(d){var m=Math.floor((d.qa+7-(d.la+6)%7)/7);2>=(d.la+371-d.qa-2)%7&&m++;if(m)53==m&&(n=(d.la+371-d.qa)%7,4==n||3==n&&Y(d.ra)||(m=1));else{m=52;var n=(d.la+7-d.qa-1)%7;(4==n||5==n&&Y(d.ra%400-1))&&m++}return h(m,2)},\"%w\":function(d){return d.la},\"%W\":function(d){return h(Math.floor((d.qa+\r\n7-(d.la+6)%7)/7),2)},\"%y\":function(d){return(d.ra+1900).toString().substring(2)},\"%Y\":function(d){return d.ra+1900},\"%z\":function(d){d=d.Ca;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Fa},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in v)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),v[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Ha(e);if(r.length>c)return 0;P.set(r,a>>>0);return r.length-1}\r\nvar Ja={a:function(a){return ua(a+24)+24},b:function(a,c,e){(new ra(a)).ya(c,e);sa++;throw a;},g:function(){return 0},I:function(){},w:function(){},y:function(){},K:function(){return 0},G:function(){},C:function(){},F:function(){},k:function(){},x:function(){},u:function(){},H:function(){},v:function(){},n:function(){},p:function(){I(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},o:function(){I(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nl:function(){return Date.now()},L:function(){return!0},M:function(a,c){a=new Date(1E3*(R[a>>>2]+4294967296*Q[a+4>>>2]));Q[c>>2>>>0]=a.getUTCSeconds();Q[c+4>>2>>>0]=a.getUTCMinutes();Q[c+8>>2>>>0]=a.getUTCHours();Q[c+12>>2>>>0]=a.getUTCDate();Q[c+16>>2>>>0]=a.getUTCMonth();Q[c+20>>2>>>0]=a.getUTCFullYear()-1900;Q[c+24>>2>>>0]=a.getUTCDay();Q[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},N:function(a,c){a=new Date(1E3*(R[a>>>2]+4294967296*Q[a+4>>>2]));Q[c>>2>>>0]=a.getSeconds();\r\nQ[c+4>>2>>>0]=a.getMinutes();Q[c+8>>2>>>0]=a.getHours();Q[c+12>>2>>>0]=a.getDate();Q[c+16>>2>>>0]=a.getMonth();Q[c+20>>2>>>0]=a.getFullYear()-1900;Q[c+24>>2>>>0]=a.getDay();var e=new Date(a.getFullYear(),0,1);Q[c+28>>2>>>0]=(a.getTime()-e.getTime())/864E5|0;Q[c+36>>2>>>0]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=e.getTimezoneOffset();Q[c+32>>2>>>0]=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0},O:function(a){var c=new Date(Q[a+20>>2>>>0]+1900,Q[a+16>>\r\n2>>>0],Q[a+12>>2>>>0],Q[a+8>>2>>>0],Q[a+4>>2>>>0],Q[a>>2>>>0],0),e=Q[a+32>>2>>>0],f=c.getTimezoneOffset(),g=new Date(c.getFullYear(),0,1),h=(new Date(c.getFullYear(),6,1)).getTimezoneOffset(),l=g.getTimezoneOffset(),q=Math.min(l,h);0>e?Q[a+32>>2>>>0]=Number(h!=l&&q==f):0<e!=(q==f)&&(h=Math.max(l,h),c.setTime(c.getTime()+6E4*((0<e?q:h)-f)));Q[a+24>>2>>>0]=c.getDay();Q[a+28>>2>>>0]=(c.getTime()-g.getTime())/864E5|0;Q[a>>2>>>0]=c.getSeconds();Q[a+4>>2>>>0]=c.getMinutes();Q[a+8>>2>>>0]=c.getHours();Q[a+\r\n12>>2>>>0]=c.getDate();Q[a+16>>2>>>0]=c.getMonth();return c.getTime()/1E3|0},z:function(){return-52},B:function(){},m:wa,d:function(){I(\"\")},t:function(){return 4294901760},h:x?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),J:function(a,c,e){M.copyWithin(a>>>0,c>>>0,c+e>>>0)},f:function(a){var c=M.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=c*(1+.2/e);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);g=g.min.call(g,4294901760,f+(65536-f%65536)%\r\n65536);a:{try{J.grow(g-ha.byteLength+65535>>>16);ia();var h=1;break a}catch(l){}h=void 0}if(h)return!0}return!1},D:function(a,c){var e=0;Ba().forEach(function(f,g){var h=c+e;g=R[a+4*g>>2>>>0]=h;for(h=0;h<f.length;++h)P[g++>>0>>>0]=f.charCodeAt(h);P[g>>0>>>0]=0;e+=f.length+1});return 0},E:function(a,c){var e=Ba();R[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});R[c>>2>>>0]=f;return 0},r:function(a){if(!noExitRuntime){if(b.onExit)b.onExit(a);K=!0}t(a,new F(a))},e:function(){return 52},\r\nj:function(){return 52},q:function(){return 70},i:function(a,c,e,f){for(var g=0,h=0;h<e;h++){var l=R[c>>2>>>0],q=R[c+4>>2>>>0];c+=8;for(var w=0;w<q;w++){var v=M[l+w>>>0],r=Da[a];0===v||10===v?((1===a?da:G)(fa(r,0)),r.length=0):r.push(v)}g+=q}R[f>>2>>>0]=g;return 0},s:X,A:Ia,c:function(a,c,e,f){return Ia(a,c,e,f)}};\r\n(function(){function a(g){b.asm=g.exports;J=b.asm.P;ia();ka.unshift(b.asm.Q);S--;b.monitorRunDependencies&&b.monitorRunDependencies(S);0==S&&(null!==T&&(clearInterval(T),T=null),U&&(g=U,U=null,g()))}function c(g){a(g.instance)}function e(g){return qa().then(function(h){return WebAssembly.instantiate(h,f)}).then(function(h){return h}).then(g,function(h){G(\"failed to asynchronously prepare wasm: \"+h);I(h)})}var f={a:Ja};S++;b.monitorRunDependencies&&b.monitorRunDependencies(S);if(b.instantiateWasm)try{return b.instantiateWasm(f,\r\na)}catch(g){return G(\"Module.instantiateWasm callback failed with error: \"+g),!1}(function(){return H||\"function\"!=typeof WebAssembly.instantiateStreaming||na()||V.startsWith(\"file://\")||x||\"function\"!=typeof fetch?e(c):fetch(V,{credentials:\"same-origin\"}).then(function(g){return WebAssembly.instantiateStreaming(g,f).then(c,function(h){G(\"wasm streaming compile failed: \"+h);G(\"falling back to ArrayBuffer instantiation\");return e(c)})})})().catch(k);return{}})();\r\nb.___wasm_call_ctors=function(){return(b.___wasm_call_ctors=b.asm.Q).apply(null,arguments)};b._OrtInit=function(){return(b._OrtInit=b.asm.R).apply(null,arguments)};b._OrtCreateSessionOptions=function(){return(b._OrtCreateSessionOptions=b.asm.S).apply(null,arguments)};b._OrtAppendExecutionProvider=function(){return(b._OrtAppendExecutionProvider=b.asm.T).apply(null,arguments)};b._OrtAddSessionConfigEntry=function(){return(b._OrtAddSessionConfigEntry=b.asm.U).apply(null,arguments)};\r\nb._OrtReleaseSessionOptions=function(){return(b._OrtReleaseSessionOptions=b.asm.V).apply(null,arguments)};b._OrtCreateSession=function(){return(b._OrtCreateSession=b.asm.W).apply(null,arguments)};b._OrtReleaseSession=function(){return(b._OrtReleaseSession=b.asm.X).apply(null,arguments)};b._OrtGetInputCount=function(){return(b._OrtGetInputCount=b.asm.Y).apply(null,arguments)};b._OrtGetOutputCount=function(){return(b._OrtGetOutputCount=b.asm.Z).apply(null,arguments)};\r\nb._OrtGetInputName=function(){return(b._OrtGetInputName=b.asm._).apply(null,arguments)};b._OrtGetOutputName=function(){return(b._OrtGetOutputName=b.asm.$).apply(null,arguments)};b._OrtFree=function(){return(b._OrtFree=b.asm.aa).apply(null,arguments)};b._OrtCreateTensor=function(){return(b._OrtCreateTensor=b.asm.ba).apply(null,arguments)};b._OrtGetTensorData=function(){return(b._OrtGetTensorData=b.asm.ca).apply(null,arguments)};\r\nb._OrtReleaseTensor=function(){return(b._OrtReleaseTensor=b.asm.da).apply(null,arguments)};b._OrtCreateRunOptions=function(){return(b._OrtCreateRunOptions=b.asm.ea).apply(null,arguments)};b._OrtAddRunConfigEntry=function(){return(b._OrtAddRunConfigEntry=b.asm.fa).apply(null,arguments)};b._OrtReleaseRunOptions=function(){return(b._OrtReleaseRunOptions=b.asm.ga).apply(null,arguments)};b._OrtRun=function(){return(b._OrtRun=b.asm.ha).apply(null,arguments)};\r\nb._OrtEndProfiling=function(){return(b._OrtEndProfiling=b.asm.ia).apply(null,arguments)};var ua=b._malloc=function(){return(ua=b._malloc=b.asm.ja).apply(null,arguments)};b._free=function(){return(b._free=b.asm.ka).apply(null,arguments)};var Ka=b.stackSave=function(){return(Ka=b.stackSave=b.asm.ma).apply(null,arguments)},La=b.stackRestore=function(){return(La=b.stackRestore=b.asm.na).apply(null,arguments)},Ma=b.stackAlloc=function(){return(Ma=b.stackAlloc=b.asm.oa).apply(null,arguments)};\r\nb.___cxa_is_pointer_type=function(){return(b.___cxa_is_pointer_type=b.asm.pa).apply(null,arguments)};b.UTF8ToString=L;b.stringToUTF8=function(a,c,e){return N(a,M,c,e)};b.lengthBytesUTF8=O;b.stackSave=Ka;b.stackRestore=La;b.stackAlloc=Ma;var Z;U=function Na(){Z||Oa();Z||(U=Na)};\r\nfunction Oa(){function a(){if(!Z&&(Z=!0,b.calledRun=!0,!K)){W(ka);aa(b);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for(\"function\"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var c=b.postRun.shift();la.unshift(c)}W(la)}}if(!(0<S)){if(b.preRun)for(\"function\"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)ma();W(ja);0<S||(b.setStatus?(b.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){b.setStatus(\"\")},1);a()},1)):a())}}\r\nif(b.preInit)for(\"function\"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Oa();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","webgpu","logLevelInternal","logLevel","value","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","tensorLayout","norm","mean","bias","normMean","normBias","inputformat","bitmapFormat","outputformat","tensorFormat","stride","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isString","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toDataURL","j","R","G","B","A","fillStyle","fillRect","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","onnxjsBackend","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","initTimeout","simd","proxy","numThreads","isInteger","numCpuLogicalCores","navigator","cpus","hardwareConcurrency","Math","min","ceil","wasmBackend","initWasm","OnnxruntimeWebAssemblySessionHandler","AttributeWithCacheKeyImpl","attribute","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","onnx","AttributeProto","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","obj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","version","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","a","c","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","build","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","len","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","bind","logInternal","stack","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","ctx","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","response","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","gpu","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","getTargetBuffer","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","HEAP8","newDims","ComputeContextImpl","customData","contextDataOffset","heapU32","HEAPU32","opKernelContext","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","HEAPU8","dataOffset","logLevelPrefix","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","acosh","asinh","atanh","pool","clipV10","cosh","parseAlphaAttributes","erf","parseGlobalMaxPoolAttributes","reciprocal","sinh","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","outputSize","vectorize","sharedDimension","dimA","shaderHelper","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","getActicationSnippet","inputStorageBuffersDeclarations","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","weightTransposeAttribute","auto_pad","kernel_shape","wIsConst","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","activation_params","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","permAttr","inputIndicesHelper","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","startTimeU64","endTimeU64","profilingTimeBase","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initOrt","loggingLevel","core","getInstance","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","ortInit","path","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","errorCode","_OrtInit","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","scriptSourceCode","what","race","PThread","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","F","P","I","U","Y","u","ready","l","h","importScripts","process","versions","ENVIRONMENT_IS_PTHREAD","O","T","__dirname","normalize","readFileSync","argv","on","oe","E","exitCode","exit","inspect","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onerror","S","warn","writeSync","print","printErr","thisProgram","quit","wasmBinary","noExitRuntime","ne","W","H","String","fromCharCode","L","charCodeAt","q","HEAP16","HEAPU16","HEAPF32","HEAPF64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","J","Q","V","preRun","Z","$","ee","cmd","onAbort","RuntimeError","te","startsWith","re","ae","ue","ce","La","Xa","ie","lb","Ra","Ka","start_routine","pb","ib","pthread_ptr","Qa","time","vb","loaded","se","We","qb","onExit","fe","pe","Oa","$a","Ua","mb","xb","receiveObjectTransfer","ob","threadInitTLS","Za","setExitStatus","Ya","fn","nb","kb","targetThread","tn","yb","transferList","Ce","thread","threadId","text","alert","filename","lineno","urlOrBlob","wasmModule","hb","le","establishStackSpace","ln","mn","me","de","he","ge","Pa","gb","cb","eb","ab","ye","_e","wb","be","ve","we","Oe","Te","Me","Se","Ae","Re","xe","Ee","ke","De","Atomics","store","sn","compareExchange","Fe","Pe","Ie","Ue","rn","Ye","toTimeString","getFullYear","getTimezoneOffset","arguments","pn","dn","un","invokeEntryPoint","cn","executeNotifiedProxyingQueue","hrtime","__performance_now_clock_drift","He","je","Ne","Le","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","qe","Be","Ge","ze","Je","Ke","Qe","Ve","Xe","Ze","$e","getMonth","getDate","getDay","Ma","Na","getTime","setDate","setMonth","setFullYear","tb","sb","Sa","Va","Ta","Ja","zb","rb","ub","includes","en","nn","an","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","setTime","jb","copyWithin","apply","grow","Wa","crypto","getRandomValues","randomBytes","asm","wa","za","monitorRunDependencies","clearInterval","instance","credentials","ok","catch","instantiate","instantiateWasm","instantiateStreaming","___wasm_call_ctors","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","pa","qa","ra","sa","_pthread_self","ta","ua","va","__emscripten_tls_init","__emscripten_thread_init","xa","__emscripten_thread_crashed","ya","_emscripten_run_in_main_runtime_thread_js","Aa","__emscripten_proxy_execute_task_queue","Ba","__emscripten_thread_free_data","Ca","__emscripten_thread_exit","Da","_emscripten_stack_set_limits","Ea","Fa","Ga","Ha","hn","calledRun","onRuntimeInitialized","postRun","setStatus","___cxa_is_pointer_type","Ia","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}